components:
  securitySchemes:
    keycloakAuth:
      type: oauth2
      description: Keycloak OAuth2 認証
      flows:
        authorizationCode:
          authorizationUrl: ${KEYCLOAK_SERVER_URL}/realms/keruta/protocol/openid_connect/auth
          tokenUrl: ${KEYCLOAK_SERVER_URL}/realms/keruta/protocol/openid_connect/token
          scopes:
            openid: OpenID Connect scope
            profile: プロファイル情報アクセス
            email: メールアドレスアクセス
            offline_access: オフラインアクセス（リフレッシュトークン）
            keruta:admin: システム管理者権限
            keruta:project-admin: プロジェクト管理者権限
            keruta:developer: 開発者権限
            keruta:viewer: 閲覧者権限
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Keycloak JWTトークンによる認証
  schemas:
    AgentResponse:
      properties:
        capabilities:
          items:
            type: string
          type: array
          uniqueItems: true
        currentTaskId:
          type: string
        description:
          type: string
        hostname:
          type: string
        id:
          type: string
        ipAddress:
          type: string
        lastHeartbeat:
          format: date-time
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          type: string
        port:
          format: int32
          type: integer
        registeredAt:
          format: date-time
          type: string
        sessionId:
          type: string
        status:
          type: string
        tags:
          items:
            type: string
          type: array
          uniqueItems: true
        updatedAt:
          format: date-time
          type: string
        version:
          type: string
      required:
      - capabilities
      - hostname
      - id
      - ipAddress
      - metadata
      - name
      - port
      - registeredAt
      - status
      - tags
      - updatedAt
      - version
      type: object
    CloneRepositoryRequest:
      properties:
        targetPath:
          type: string
      required:
      - targetPath
      type: object
    CreateRepositoryRequest:
      properties:
        authConfig:
          additionalProperties:
            type: string
          type: object
        authType:
          type: string
        branch:
          type: string
        description:
          type: string
        installScript:
          type: string
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        url:
          type: string
      required:
      - authType
      - branch
      - name
      - tags
      - url
      type: object
    CreateSessionRequest:
      properties:
        description:
          type: string
        name:
          type: string
        tags:
          items:
            type: string
          type: array
      required:
      - name
      - tags
      type: object
    CreateTaskRequest:
      properties:
        dependsOn:
          items:
            type: string
          type: array
        description:
          type: string
        maxRetries:
          format: int32
          type: integer
        metadata:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
        parentTaskId:
          type: string
        priority:
          format: int32
          type: integer
        script:
          type: string
        sessionId:
          type: string
        tags:
          items:
            type: string
          type: array
      required:
      - dependsOn
      - maxRetries
      - metadata
      - name
      - parameters
      - priority
      - script
      - sessionId
      - tags
      type: object
    Document:
      properties:
        content:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        tags:
          items:
            type: string
          type: array
        title:
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - content
      - createdAt
      - tags
      - title
      - updatedAt
      type: object
    RegisterAgentRequest:
      properties:
        capabilities:
          items:
            type: string
          type: array
          uniqueItems: true
        description:
          type: string
        hostname:
          type: string
        ipAddress:
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          type: string
        port:
          format: int32
          type: integer
        tags:
          items:
            type: string
          type: array
          uniqueItems: true
        version:
          type: string
      required:
      - capabilities
      - hostname
      - ipAddress
      - metadata
      - name
      - port
      - tags
      - version
      type: object
    RepositoryDetailResponse:
      properties:
        authConfigPresent:
          type: boolean
        authType:
          type: string
        branch:
          type: string
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        id:
          type: string
        installScript:
          type: string
        isActive:
          type: boolean
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
        url:
          type: string
      required:
      - authConfigPresent
      - authType
      - branch
      - createdAt
      - id
      - isActive
      - name
      - tags
      - updatedAt
      - url
      type: object
    RepositoryOperationResponse:
      properties:
        details:
          additionalProperties:
            type: object
          type: object
        message:
          type: string
        success:
          type: boolean
      required:
      - message
      - success
      type: object
    RepositoryResponse:
      properties:
        authType:
          type: string
        branch:
          type: string
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        hasInstallScript:
          type: boolean
        id:
          type: string
        isActive:
          type: boolean
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
        url:
          type: string
      required:
      - authType
      - branch
      - createdAt
      - hasInstallScript
      - id
      - isActive
      - name
      - tags
      - updatedAt
      - url
      type: object
    SessionDetailResponse:
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
        status:
          type: string
        tags:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - id
      - name
      - status
      - tags
      - updatedAt
      type: object
    SessionResponse:
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
        status:
          type: string
        tags:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - id
      - name
      - status
      - tags
      - updatedAt
      type: object
    TaskResponse:
      properties:
        artifacts:
          items:
            type: string
          type: array
        completedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        dependsOn:
          items:
            type: string
          type: array
        description:
          type: string
        errorCode:
          type: string
        errorMessage:
          type: string
        id:
          type: string
        logs:
          items:
            type: string
          type: array
        maxRetries:
          format: int32
          type: integer
        metadata:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
        parentTaskId:
          type: string
        priority:
          format: int32
          type: integer
        retryCount:
          format: int32
          type: integer
        script:
          type: string
        sessionId:
          type: string
        startedAt:
          format: date-time
          type: string
        status:
          type: string
        tags:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
        createdBy:
          type: string
          description: タスク作成者のユーザーID（Keycloak sub claim）
        createdByUsername:
          type: string
          description: タスク作成者のユーザー名（表示用）
        ownerId:
          type: string
          description: タスク所有者のユーザーID（通常はcreatedByと同じ）
      required:
      - artifacts
      - createdAt
      - createdBy
      - dependsOn
      - id
      - logs
      - maxRetries
      - metadata
      - name
      - ownerId
      - parameters
      - priority
      - retryCount
      - script
      - sessionId
      - status
      - tags
      - updatedAt
      type: object
    UpdateAgentRequest:
      properties:
        description:
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          type: string
        tags:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    UpdateRepositoryRequest:
      properties:
        authConfig:
          additionalProperties:
            type: string
          type: object
        authType:
          type: string
        branch:
          type: string
        description:
          type: string
        installScript:
          type: string
        isActive:
          type: boolean
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        url:
          type: string
      type: object
    UpdateSessionRequest:
      properties:
        description:
          type: string
        name:
          type: string
        tags:
          items:
            type: string
          type: array
      required:
      - name
      - tags
      type: object
    UpdateTaskRequest:
      properties:
        dependsOn:
          items:
            type: string
          type: array
        description:
          type: string
        maxRetries:
          format: int32
          type: integer
        metadata:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
        priority:
          format: int32
          type: integer
        script:
          type: string
        status:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
info:
  title: OpenAPI definition
  version: v0
openapi: 3.0.1
security:
  - bearerAuth: []
  - keycloakAuth: []
paths:
  /api/v1/agents:
    get:
      operationId: getAllAgents
      parameters:
      - in: query
        name: status
        required: false
        schema:
          type: string
      - in: query
        name: sessionId
        required: false
        schema:
          type: string
      - in: query
        name: capability
        required: false
        schema:
          type: string
      - in: query
        name: tag
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/AgentResponse'
                type: array
          description: OK
      tags:
      - agent-controller
  /api/v1/agents/register:
    post:
      operationId: registerAgent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterAgentRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AgentResponse'
          description: OK
      tags:
      - agent-controller
  /api/v1/agents/{id}:
    delete:
      operationId: deregisterAgent
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                additionalProperties:
                  type: object
                type: object
          description: OK
      tags:
      - agent-controller
    get:
      operationId: getAgentById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AgentResponse'
          description: OK
      tags:
      - agent-controller
    put:
      operationId: updateAgent
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAgentRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AgentResponse'
          description: OK
      tags:
      - agent-controller
  /api/v1/documents:
    get:
      description: Retrieves a list of all documents
      operationId: getAllDocuments
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Document'
                type: array
          description: OK
      summary: Get all documents
      tags:
      - Document
    post:
      description: Creates a new document
      operationId: createDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Document'
          description: OK
      summary: Create a document
      tags:
      - Document
  /api/v1/documents/search:
    get:
      description: Searches for documents based on query parameters
      operationId: searchDocuments
      parameters:
      - in: query
        name: title
        required: false
        schema:
          type: string
      - in: query
        name: tag
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Document'
                type: array
          description: OK
      summary: Search documents
      tags:
      - Document
  /api/v1/documents/{id}:
    delete:
      description: Deletes a document by its ID
      operationId: deleteDocument
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
      summary: Delete document
      tags:
      - Document
    get:
      description: Retrieves a specific document by its ID
      operationId: getDocumentById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Document'
          description: OK
      summary: Get document by ID
      tags:
      - Document
    put:
      description: Updates an existing document
      operationId: updateDocument
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Document'
          description: OK
      summary: Update document
      tags:
      - Document
  /api/v1/health:
    get:
      operationId: health
      responses:
        '200':
          content:
            '*/*':
              schema:
                additionalProperties:
                  type: object
                type: object
          description: OK
      tags:
      - health-controller
  /api/v1/integration/health:
    get:
      description: Health check for integration services
      operationId: healthCheck_2
      responses:
        '200':
          content:
            '*/*':
              schema:
                additionalProperties:
                  type: object
                type: object
          description: OK
      summary: Integration health check
      tags:
      - Task Integration
  /api/v1/repositories:
    get:
      description: 全てのリポジトリの一覧を取得します
      operationId: getAllRepositories
      parameters:
      - in: query
        name: search
        required: false
        schema:
          type: string
      - in: query
        name: activeOnly
        required: false
        schema:
          type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/RepositoryResponse'
                type: array
          description: OK
      summary: リポジトリ一覧取得
      tags:
      - Repository Management
    post:
      description: 新しいリポジトリを作成します
      operationId: createRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRepositoryRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RepositoryResponse'
          description: OK
      summary: リポジトリ作成
      tags:
      - Repository Management
  /api/v1/repositories/tags:
    get:
      description: リポジトリで使用されている全てのタグを取得します
      operationId: getAvailableTags
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: 利用可能なタグ一覧
      tags:
      - Repository Management
  /api/v1/repositories/{id}:
    delete:
      description: 指定されたIDのリポジトリを削除します
      operationId: deleteRepository
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                additionalProperties:
                  type: string
                type: object
          description: OK
      summary: リポジトリ削除
      tags:
      - Repository Management
    get:
      description: 指定されたIDのリポジトリ詳細を取得します
      operationId: getRepositoryById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RepositoryDetailResponse'
          description: OK
      summary: リポジトリ詳細取得
      tags:
      - Repository Management
    put:
      description: 既存のリポジトリを更新します
      operationId: updateRepository
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRepositoryRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RepositoryResponse'
          description: OK
      summary: リポジトリ更新
      tags:
      - Repository Management
  /api/v1/repositories/{id}/clone:
    post:
      description: リポジトリをクローンします
      operationId: cloneRepository
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneRepositoryRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RepositoryOperationResponse'
          description: OK
      summary: リポジトリクローン
      tags:
      - Repository Management
  /api/v1/repositories/{id}/toggle-status:
    post:
      description: リポジトリのアクティブ/非アクティブ状態を切り替えます
      operationId: toggleRepositoryStatus
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RepositoryResponse'
          description: OK
      summary: リポジトリ状態切り替え
      tags:
      - Repository Management
  /api/v1/sessions:
    get:
      description: Retrieves all sessions in the system
      operationId: getAllSessions
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/SessionResponse'
                type: array
          description: OK
      summary: Get all sessions
      tags:
      - Session
    post:
      description: Creates a new session in the system
      operationId: createSession
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SessionResponse'
          description: OK
      summary: Create a new session
      tags:
      - Session
  /api/v1/sessions/search:
    get:
      description: Searches sessions by name pattern
      operationId: searchSessionsByName
      parameters:
      - in: query
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/SessionResponse'
                type: array
          description: OK
      summary: Search sessions by name
      tags:
      - Session
  /api/v1/sessions/status/{status}:
    get:
      description: Retrieves all sessions with a specific status
      operationId: getSessionsByStatus
      parameters:
      - in: path
        name: status
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/SessionResponse'
                type: array
          description: OK
      summary: Get sessions by status
      tags:
      - Session
  /api/v1/sessions/tag/{tag}:
    get:
      description: Retrieves all sessions with a specific tag
      operationId: getSessionsByTag
      parameters:
      - in: path
        name: tag
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/SessionResponse'
                type: array
          description: OK
      summary: Get sessions by tag
      tags:
      - Session
  /api/v1/sessions/{id}:
    delete:
      description: Deletes a specific session
      operationId: deleteSession
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
      summary: Delete session
      tags:
      - Session
    get:
      description: Retrieves a specific session by its ID
      operationId: getSessionById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SessionResponse'
          description: OK
      summary: Get session by ID
      tags:
      - Session
    put:
      description: Updates an existing session (status changes are not allowed)
      operationId: updateSession
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSessionRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SessionResponse'
          description: OK
      summary: Update session
      tags:
      - Session
  /api/v1/sessions/{id}/detail:
    get:
      description: Retrieves detailed information about a session
      operationId: getSessionDetail
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SessionDetailResponse'
          description: OK
      summary: Get session detail
      tags:
      - Session Detail
  /api/v1/sessions/{id}/status:
    put:
      description: Internal API - Status updates are managed by the system
      operationId: updateSessionStatus
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                additionalProperties:
                  type: string
                type: object
          description: OK
      summary: Update session status
      tags:
      - Session
  /api/v1/sessions/{id}/sync-status:
    post:
      description: Synchronizes session status
      operationId: syncSessionStatus
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SessionResponse'
          description: OK
      summary: Sync session status
      tags:
      - Session
  /api/v1/sessions/{id}/tags:
    post:
      description: Adds a tag to a specific session
      operationId: addTagToSession
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SessionResponse'
          description: OK
      summary: Add tag to session
      tags:
      - Session
  /api/v1/sessions/{id}/tags/{tag}:
    delete:
      description: Removes a tag from a specific session
      operationId: removeTagFromSession
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: path
        name: tag
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/SessionResponse'
          description: OK
      summary: Remove tag from session
      tags:
      - Session
  /api/v1/tasks:
    get:
      description: Retrieves all tasks in the system
      operationId: getAllTasks
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/TaskResponse'
                type: array
          description: OK
      summary: Get all tasks
      tags:
      - Task
    post:
      description: Creates a new task in the system
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Create a new task
      tags:
      - Task
  /api/v1/tasks/search:
    get:
      description: Searches tasks by name pattern
      operationId: searchTasksByName
      parameters:
      - in: query
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/TaskResponse'
                type: array
          description: OK
      summary: Search tasks by name
      tags:
      - Task
  /api/v1/tasks/session/{sessionId}:
    get:
      description: Retrieves all tasks for a specific session
      operationId: getTasksBySessionId
      parameters:
      - in: path
        name: sessionId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/TaskResponse'
                type: array
          description: OK
      summary: Get tasks by session ID
      tags:
      - Task
  /api/v1/tasks/session/{sessionId}/pending:
    get:
      description: Retrieves pending tasks for a specific session
      operationId: getPendingTasksForSession
      parameters:
      - in: path
        name: sessionId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/TaskResponse'
                type: array
          description: OK
      summary: Get pending tasks for session
      tags:
      - Task
  /api/v1/tasks/status/{status}:
    get:
      description: Retrieves all tasks with a specific status
      operationId: getTasksByStatus
      parameters:
      - in: path
        name: status
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/TaskResponse'
                type: array
          description: OK
      summary: Get tasks by status
      tags:
      - Task
  /api/v1/tasks/tag/{tag}:
    get:
      description: Retrieves all tasks with a specific tag
      operationId: getTasksByTag
      parameters:
      - in: path
        name: tag
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/TaskResponse'
                type: array
          description: OK
      summary: Get tasks by tag
      tags:
      - Task
  /api/v1/tasks/{id}:
    delete:
      description: Deletes a specific task
      operationId: deleteTask
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
      summary: Delete task
      tags:
      - Task
    get:
      description: Retrieves a specific task by its ID
      operationId: getTaskById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Get task by ID
      tags:
      - Task
    put:
      description: Updates an existing task
      operationId: updateTask
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Update task
      tags:
      - Task
  /api/v1/tasks/{id}/cancel:
    post:
      description: Cancels a specific task
      operationId: cancelTask
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Cancel task
      tags:
      - Task
  /api/v1/tasks/{id}/complete:
    post:
      description: Marks a specific task as completed
      operationId: completeTask
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Complete task
      tags:
      - Task
  /api/v1/tasks/{id}/fail:
    post:
      description: Marks a specific task as failed
      operationId: failTask
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Fail task
      tags:
      - Task
  /api/v1/tasks/{id}/logs:
    post:
      description: Adds a log message to a specific task
      operationId: addLogToTask
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Add log to task
      tags:
      - Task
  /api/v1/tasks/{id}/retry:
    post:
      description: Retries a specific task
      operationId: retryTask
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Retry task
      tags:
      - Task
  /api/v1/tasks/{id}/start:
    post:
      description: Starts a specific task
      operationId: startTask
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Start task
      tags:
      - Task
  /api/v1/tasks/{id}/status:
    put:
      description: Updates the status of a specific task
      operationId: updateTaskStatus
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Update task status
      tags:
      - Task
  /ws/tasks:
    get:
      summary: WebSocket connection for real-time task distribution
      description: |
        WebSocketエンドポイント for keruta-executor to receive tasks in real-time.
        
        **Connection URL**: `ws://host:port/ws/tasks`
        
        **Message Format**:
        - Incoming: Task assignment messages
        - Outgoing: Task status updates
        
        **Authentication**: Bearer token required in Authorization header
      operationId: connectTaskWebSocket
      tags:
        - websocket-controller
      responses:
        '101':
          description: WebSocket connection established
        '401':
          description: Unauthorized - invalid token
        '403':
          description: Forbidden - insufficient permissions
  /ws/agents/{agentId}/logs:
    get:
      summary: WebSocket connection for real-time log streaming
      description: |
        WebSocketエンドポイント for keruta-agent to stream logs in real-time.
        
        **Connection URL**: `ws://host:port/ws/agents/{agentId}/logs`
        
        **Message Format**:
        - Outgoing: Real-time log entries
        - Incoming: Log level configuration
        
        **Authentication**: Bearer token required in Authorization header
      operationId: connectAgentLogWebSocket
      parameters:
        - in: path
          name: agentId
          required: true
          schema:
            type: string
          description: Unique identifier for the agent
      tags:
        - websocket-controller
      responses:
        '101':
          description: WebSocket connection established
        '401':
          description: Unauthorized - invalid token
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: Agent not found
servers:
- description: Generated server url
  url: http://localhost:8080
tags:
- description: Session management API
  name: Session
- description: Task integration API
  name: Task Integration
- description: Session detail management API
  name: Session Detail
- description: Document management API
  name: Document
- description: リポジトリ管理API
  name: Repository Management
- description: Authentication API (Disabled)
  name: Authentication
- description: Task management API
  name: Task
