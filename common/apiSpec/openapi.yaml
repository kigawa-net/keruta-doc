components:
  securitySchemes:
    keycloakAuth:
      type: oauth2
      description: Keycloak OAuth2 認証
      flows:
        authorizationCode:
          authorizationUrl: ${KEYCLOAK_SERVER_URL}/realms/keruta/protocol/openid_connect/auth
          tokenUrl: ${KEYCLOAK_SERVER_URL}/realms/keruta/protocol/openid_connect/token
          scopes:
            openid: OpenID Connect scope
            profile: プロファイル情報アクセス
            email: メールアドレスアクセス
            offline_access: オフラインアクセス（リフレッシュトークン）
            keruta:admin: システム管理者権限
            keruta:project-admin: プロジェクト管理者権限
            keruta:developer: 開発者権限
            keruta:viewer: 閲覧者権限
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Keycloak JWTトークンによる認証
  schemas:
    AgentResponse:
      properties:
        capabilities:
          items:
            type: string
          type: array
          uniqueItems: true
        currentTaskId:
          type: string
        description:
          type: string
        hostname:
          type: string
        id:
          type: string
        ipAddress:
          type: string
        lastHeartbeat:
          format: date-time
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          type: string
        port:
          format: int32
          type: integer
        registeredAt:
          format: date-time
          type: string
        queueId:
          type: string
        status:
          type: string
        tags:
          items:
            type: string
          type: array
          uniqueItems: true
        updatedAt:
          format: date-time
          type: string
        version:
          type: string
      required:
      - capabilities
      - hostname
      - id
      - ipAddress
      - metadata
      - name
      - port
      - registeredAt
      - status
      - tags
      - updatedAt
      - version
      type: object
    CloneRepositoryRequest:
      properties:
        targetPath:
          type: string
      required:
      - targetPath
      type: object
    CreateRepositoryRequest:
      properties:
        authConfig:
          additionalProperties:
            type: string
          type: object
        authType:
          type: string
        branch:
          type: string
        description:
          type: string
        installScript:
          type: string
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        url:
          type: string
      required:
      - authType
      - branch
      - name
      - tags
      - url
      type: object
    CreateQueueRequest:
      properties:
        description:
          type: string
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        templateConfig:
          $ref: '#/components/schemas/QueueTemplateConfigRequest'
        providerId:
          type: string
          description: キューに関連付けるタスク実行プロバイダーのID
      required:
      - name
      - tags
      - providerId
      type: object
    CreateTaskRequest:
      properties:
        dependsOn:
          items:
            type: string
          type: array
        description:
          type: string
        maxRetries:
          format: int32
          type: integer
        metadata:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
        parentTaskId:
          type: string
        priority:
          format: int32
          type: integer
        script:
          type: string
        queueId:
          type: string
        tags:
          items:
            type: string
          type: array
      required:
      - dependsOn
      - maxRetries
      - metadata
      - name
      - parameters
      - priority
      - script
      - queueId
      - tags
      type: object
    Document:
      properties:
        content:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        tags:
          items:
            type: string
          type: array
        title:
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - content
      - createdAt
      - tags
      - title
      - updatedAt
      type: object
    RegisterAgentRequest:
      properties:
        capabilities:
          items:
            type: string
          type: array
          uniqueItems: true
        description:
          type: string
        hostname:
          type: string
        ipAddress:
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          type: string
        port:
          format: int32
          type: integer
        tags:
          items:
            type: string
          type: array
          uniqueItems: true
        version:
          type: string
      required:
      - capabilities
      - hostname
      - ipAddress
      - metadata
      - name
      - port
      - tags
      - version
      type: object
    RepositoryDetailResponse:
      properties:
        authConfigPresent:
          type: boolean
        authType:
          type: string
        branch:
          type: string
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        id:
          type: string
        installScript:
          type: string
        isActive:
          type: boolean
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
        url:
          type: string
      required:
      - authConfigPresent
      - authType
      - branch
      - createdAt
      - id
      - isActive
      - name
      - tags
      - updatedAt
      - url
      type: object
    RepositoryOperationResponse:
      properties:
        details:
          additionalProperties:
            type: object
          type: object
        message:
          type: string
        success:
          type: boolean
      required:
      - message
      - success
      type: object
    RepositoryResponse:
      properties:
        authType:
          type: string
        branch:
          type: string
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        hasInstallScript:
          type: boolean
        id:
          type: string
        isActive:
          type: boolean
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
        url:
          type: string
      required:
      - authType
      - branch
      - createdAt
      - hasInstallScript
      - id
      - isActive
      - name
      - tags
      - updatedAt
      - url
      type: object
    QueueDetailResponse:
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
        status:
          type: string
        tags:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
        providerId:
          type: string
          description: キューに関連付けられたタスク実行プロバイダーのID
        provider:
          $ref: '#/components/schemas/TaskExecutionProvider'
      required:
      - createdAt
      - id
      - name
      - status
      - tags
      - updatedAt
      - providerId
      - provider
      type: object
    QueueResponse:
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
        status:
          type: string
        tags:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
        providerId:
          type: string
          description: キューに関連付けられたタスク実行プロバイダーのID
        providerName:
          type: string
          description: プロバイダー名（表示用）
        providerType:
          type: string
          enum: [kubernetes, docker, local, ssh, cloud]
          description: プロバイダーの種類
      required:
      - createdAt
      - id
      - name
      - status
      - tags
      - updatedAt
      - providerId
      - providerName
      - providerType
      type: object
    TaskResponse:
      properties:
        artifacts:
          items:
            type: string
          type: array
        completedAt:
          format: date-time
          type: string
        createdAt:
          format: date-time
          type: string
        dependsOn:
          items:
            type: string
          type: array
        description:
          type: string
        errorCode:
          type: string
        errorMessage:
          type: string
        id:
          type: string
        logs:
          items:
            type: string
          type: array
        maxRetries:
          format: int32
          type: integer
        metadata:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
        parentTaskId:
          type: string
        priority:
          format: int32
          type: integer
        retryCount:
          format: int32
          type: integer
        script:
          type: string
        queueId:
          type: string
        startedAt:
          format: date-time
          type: string
        status:
          type: string
        tags:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
        createdBy:
          type: string
          description: タスク作成者のユーザーID（Keycloak sub claim）
        createdByUsername:
          type: string
          description: タスク作成者のユーザー名（表示用）
        ownerId:
          type: string
          description: タスク所有者のユーザーID（通常はcreatedByと同じ）
      required:
      - artifacts
      - createdAt
      - createdBy
      - dependsOn
      - id
      - logs
      - maxRetries
      - metadata
      - name
      - ownerId
      - parameters
      - priority
      - retryCount
      - script
      - queueId
      - status
      - tags
      - updatedAt
      type: object
    # Task Execution Provider Schemas
    TaskExecutionProvider:
      properties:
        id:
          type: string
          description: プロバイダーの一意識別子
        name:
          type: string
          description: プロバイダー名
        type:
          type: string
          enum: [kubernetes, docker, local, ssh, cloud]
          description: 実行プロバイダーの種類
        description:
          type: string
          description: プロバイダーの説明
        isActive:
          type: boolean
          description: プロバイダーがアクティブかどうか
        configuration:
          type: object
          additionalProperties:
            type: string
          description: プロバイダー固有の設定
        capabilities:
          type: array
          items:
            type: string
          description: プロバイダーがサポートする機能のリスト
        priority:
          type: integer
          format: int32
          description: プロバイダーの優先度（数値が高いほど優先）
        maxConcurrentTasks:
          type: integer
          format: int32
          description: 同時実行可能なタスク数の上限
        currentTaskCount:
          type: integer
          format: int32
          description: 現在実行中のタスク数
        tags:
          type: array
          items:
            type: string
          description: プロバイダーのタグ
        supportedArchitectures:
          type: array
          items:
            type: string
          description: サポートするアーキテクチャ（amd64, arm64など）
        resourceRequirements:
          $ref: '#/components/schemas/ResourceRequirements'
        healthStatus:
          type: string
          enum: [healthy, unhealthy, unknown]
          description: プロバイダーのヘルスステータス
        lastHealthCheck:
          type: string
          format: date-time
          description: 最後のヘルスチェック実行時刻
        errorMessage:
          type: string
          description: エラーメッセージ（エラー時のみ）
        createdAt:
          type: string
          format: date-time
          description: 作成日時
        updatedAt:
          type: string
          format: date-time
          description: 更新日時
      required:
        - id
        - name
        - type
        - isActive
        - configuration
        - capabilities
        - priority
        - maxConcurrentTasks
        - currentTaskCount
        - tags
        - supportedArchitectures
        - healthStatus
        - createdAt
        - updatedAt
      type: object
    CreateTaskExecutionProviderRequest:
      properties:
        name:
          type: string
          description: プロバイダー名
        type:
          type: string
          enum: [kubernetes, docker, local, ssh, cloud]
          description: 実行プロバイダーの種類
        description:
          type: string
          description: プロバイダーの説明
        configuration:
          type: object
          additionalProperties:
            type: string
          description: プロバイダー固有の設定
        capabilities:
          type: array
          items:
            type: string
          description: プロバイダーがサポートする機能のリスト
        priority:
          type: integer
          format: int32
          description: プロバイダーの優先度（数値が高いほど優先）
        maxConcurrentTasks:
          type: integer
          format: int32
          description: 同時実行可能なタスク数の上限
        tags:
          type: array
          items:
            type: string
          description: プロバイダーのタグ
        supportedArchitectures:
          type: array
          items:
            type: string
          description: サポートするアーキテクチャ（amd64, arm64など）
        resourceRequirements:
          $ref: '#/components/schemas/ResourceRequirements'
      required:
        - name
        - type
        - configuration
        - capabilities
        - priority
        - maxConcurrentTasks
        - tags
        - supportedArchitectures
      type: object
    UpdateTaskExecutionProviderRequest:
      properties:
        name:
          type: string
          description: プロバイダー名
        description:
          type: string
          description: プロバイダーの説明
        configuration:
          type: object
          additionalProperties:
            type: string
          description: プロバイダー固有の設定
        capabilities:
          type: array
          items:
            type: string
          description: プロバイダーがサポートする機能のリスト
        priority:
          type: integer
          format: int32
          description: プロバイダーの優先度（数値が高いほど優先）
        maxConcurrentTasks:
          type: integer
          format: int32
          description: 同時実行可能なタスク数の上限
        tags:
          type: array
          items:
            type: string
          description: プロバイダーのタグ
        supportedArchitectures:
          type: array
          items:
            type: string
          description: サポートするアーキテクチャ（amd64, arm64など）
        resourceRequirements:
          $ref: '#/components/schemas/ResourceRequirements'
        isActive:
          type: boolean
          description: プロバイダーがアクティブかどうか
      type: object
    ResourceRequirements:
      properties:
        cpu:
          type: string
          description: CPU要求量（例："100m", "1"）
        memory:
          type: string
          description: メモリ要求量（例："256Mi", "1Gi"）
        storage:
          type: string
          description: ストレージ要求量（例："10Gi"）
        gpu:
          type: string
          description: GPU要求量（例："1"）
      type: object
    TaskExecutionRequest:
      properties:
        taskId:
          type: string
          description: 実行するタスクのID
        providerId:
          type: string
          description: 使用するプロバイダーのID（指定しない場合は自動選択）
        overrideConfiguration:
          type: object
          additionalProperties:
            type: string
          description: プロバイダー設定のオーバーライド
        timeout:
          type: integer
          format: int32
          description: タイムアウト時間（秒）
      required:
        - taskId
      type: object
    TaskExecutionResult:
      properties:
        taskId:
          type: string
          description: 実行したタスクのID
        providerId:
          type: string
          description: 使用したプロバイダーのID
        executionId:
          type: string
          description: 実行の一意識別子
        status:
          type: string
          enum: [pending, running, completed, failed, cancelled]
          description: 実行ステータス
        startedAt:
          type: string
          format: date-time
          description: 実行開始時刻
        completedAt:
          type: string
          format: date-time
          description: 実行完了時刻
        exitCode:
          type: integer
          format: int32
          description: 終了コード
        stdout:
          type: string
          description: 標準出力
        stderr:
          type: string
          description: 標準エラー出力
        artifacts:
          type: array
          items:
            type: string
          description: 実行により生成されたアーティファクト
        resourceUsage:
          $ref: '#/components/schemas/ResourceUsage'
        errorMessage:
          type: string
          description: エラーメッセージ（エラー時のみ）
      required:
        - taskId
        - providerId
        - executionId
        - status
      type: object
    ResourceUsage:
      properties:
        peakCpuUsage:
          type: string
          description: ピーク時のCPU使用量
        peakMemoryUsage:
          type: string
          description: ピーク時のメモリ使用量
        executionTime:
          type: integer
          format: int64
          description: 実行時間（ミリ秒）
        networkIn:
          type: integer
          format: int64
          description: ネットワーク受信量（バイト）
        networkOut:
          type: integer
          format: int64
          description: ネットワーク送信量（バイト）
      type: object
    # WebSocket Message Schemas
    TaskStatusUpdateMessage:
      properties:
        type:
          type: string
          enum: [task_status_update, task_progress_update, task_log_update]
          description: メッセージタイプ
        taskId:
          type: string
          description: タスクID
        timestamp:
          type: string
          format: date-time
          description: メッセージタイムスタンプ
        data:
          $ref: '#/components/schemas/TaskStatusUpdateData'
      required:
        - type
        - taskId
        - timestamp
        - data
      type: object
    TaskStatusUpdateData:
      properties:
        status:
          type: string
          enum: [pending, running, completed, failed, cancelled]
          description: 新しいタスクステータス
        progress:
          type: integer
          format: int32
          minimum: 0
          maximum: 100
          description: タスクの進捗率（0-100%）
        message:
          type: string
          description: ステータス変更に関するメッセージ
        startedAt:
          type: string
          format: date-time
          description: タスク開始時刻（statusがrunningの場合）
        completedAt:
          type: string
          format: date-time
          description: タスク完了時刻（statusがcompleted/failed/cancelledの場合）
        errorCode:
          type: string
          description: エラーコード（statusがfailedの場合）
        errorMessage:
          type: string
          description: エラーメッセージ（statusがfailedの場合）
        logs:
          type: array
          items:
            type: string
          description: 新しいログエントリ（typeがtask_log_updateの場合）
        artifacts:
          type: array
          items:
            type: string
          description: 生成されたアーティファクト（statusがcompletedの場合）
        resourceUsage:
          $ref: '#/components/schemas/ResourceUsage'
      type: object
    WebSocketSubscriptionRequest:
      properties:
        action:
          type: string
          enum: [subscribe, unsubscribe]
          description: アクション（購読/購読解除）
        channels:
          type: array
          items:
            type: string
          description: 購読するチャンネル（task:{taskId}, queue:{queueId}, provider:{providerId}, all）
        filters:
          type: object
          properties:
            taskIds:
              type: array
              items:
                type: string
              description: 特定のタスクIDのみ購読
            queueIds:
              type: array
              items:
                type: string
              description: 特定のキューIDのタスクのみ購読
            providerIds:
              type: array
              items:
                type: string
              description: 特定のプロバイダーIDのタスクのみ購読
            statuses:
              type: array
              items:
                type: string
                enum: [pending, running, completed, failed, cancelled]
              description: 特定のステータスのタスクのみ購読
          description: 購読フィルター
      required:
        - action
        - channels
      type: object
    WebSocketResponse:
      properties:
        type:
          type: string
          enum: [subscription_success, subscription_error, task_status_update, task_progress_update, task_log_update, heartbeat]
          description: レスポンスタイプ
        message:
          type: string
          description: レスポンスメッセージ
        data:
          type: object
          description: レスポンスデータ
        timestamp:
          type: string
          format: date-time
          description: レスポンスタイムスタンプ
      required:
        - type
        - timestamp
      type: object
    UpdateAgentRequest:
      properties:
        description:
          type: string
        metadata:
          additionalProperties:
            type: object
          type: object
        name:
          type: string
        tags:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    UpdateRepositoryRequest:
      properties:
        authConfig:
          additionalProperties:
            type: string
          type: object
        authType:
          type: string
        branch:
          type: string
        description:
          type: string
        installScript:
          type: string
        isActive:
          type: boolean
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        url:
          type: string
      type: object
    UpdateQueueRequest:
      properties:
        description:
          type: string
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        providerId:
          type: string
          description: キューに関連付けるタスク実行プロバイダーのID
      required:
      - name
      - tags
      type: object
    UpdateTaskRequest:
      properties:
        dependsOn:
          items:
            type: string
          type: array
        description:
          type: string
        maxRetries:
          format: int32
          type: integer
        metadata:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
        priority:
          format: int32
          type: integer
        script:
          type: string
        status:
          type: string
        tags:
          items:
            type: string
          type: array
      type: object
info:
  title: OpenAPI definition
  version: v0
openapi: 3.0.1
security:
  - bearerAuth: []
  - keycloakAuth: []
paths:
  /api/v1/agents:
    get:
      operationId: getAllAgents
      parameters:
      - in: query
        name: status
        required: false
        schema:
          type: string
      - in: query
        name: queueId
        required: false
        schema:
          type: string
      - in: query
        name: capability
        required: false
        schema:
          type: string
      - in: query
        name: tag
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/AgentResponse'
                type: array
          description: OK
      tags:
      - agent-controller
  /api/v1/agents/register:
    post:
      operationId: registerAgent
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterAgentRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AgentResponse'
          description: OK
      tags:
      - agent-controller
  /api/v1/agents/{id}:
    delete:
      operationId: deregisterAgent
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                additionalProperties:
                  type: object
                type: object
          description: OK
      tags:
      - agent-controller
    get:
      operationId: getAgentById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AgentResponse'
          description: OK
      tags:
      - agent-controller
    put:
      operationId: updateAgent
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAgentRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AgentResponse'
          description: OK
      tags:
      - agent-controller
  /api/v1/documents:
    get:
      description: Retrieves a list of all documents
      operationId: getAllDocuments
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Document'
                type: array
          description: OK
      summary: Get all documents
      tags:
      - Document
    post:
      description: Creates a new document
      operationId: createDocument
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Document'
          description: OK
      summary: Create a document
      tags:
      - Document
  /api/v1/documents/search:
    get:
      description: Searches for documents based on query parameters
      operationId: searchDocuments
      parameters:
      - in: query
        name: title
        required: false
        schema:
          type: string
      - in: query
        name: tag
        required: false
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/Document'
                type: array
          description: OK
      summary: Search documents
      tags:
      - Document
  /api/v1/documents/{id}:
    delete:
      description: Deletes a document by its ID
      operationId: deleteDocument
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
      summary: Delete document
      tags:
      - Document
    get:
      description: Retrieves a specific document by its ID
      operationId: getDocumentById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Document'
          description: OK
      summary: Get document by ID
      tags:
      - Document
    put:
      description: Updates an existing document
      operationId: updateDocument
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Document'
          description: OK
      summary: Update document
      tags:
      - Document
  /api/v1/health:
    get:
      operationId: health
      responses:
        '200':
          content:
            '*/*':
              schema:
                additionalProperties:
                  type: object
                type: object
          description: OK
      tags:
      - health-controller
  /api/v1/integration/health:
    get:
      description: Health check for integration services
      operationId: healthCheck_2
      responses:
        '200':
          content:
            '*/*':
              schema:
                additionalProperties:
                  type: object
                type: object
          description: OK
      summary: Integration health check
      tags:
      - Task Integration
  /api/v1/repositories:
    get:
      description: 全てのリポジトリの一覧を取得します
      operationId: getAllRepositories
      parameters:
      - in: query
        name: search
        required: false
        schema:
          type: string
      - in: query
        name: activeOnly
        required: false
        schema:
          type: boolean
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/RepositoryResponse'
                type: array
          description: OK
      summary: リポジトリ一覧取得
      tags:
      - Repository Management
    post:
      description: 新しいリポジトリを作成します
      operationId: createRepository
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRepositoryRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RepositoryResponse'
          description: OK
      summary: リポジトリ作成
      tags:
      - Repository Management
  /api/v1/repositories/tags:
    get:
      description: リポジトリで使用されている全てのタグを取得します
      operationId: getAvailableTags
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  type: string
                type: array
          description: OK
      summary: 利用可能なタグ一覧
      tags:
      - Repository Management
  /api/v1/repositories/{id}:
    delete:
      description: 指定されたIDのリポジトリを削除します
      operationId: deleteRepository
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                additionalProperties:
                  type: string
                type: object
          description: OK
      summary: リポジトリ削除
      tags:
      - Repository Management
    get:
      description: 指定されたIDのリポジトリ詳細を取得します
      operationId: getRepositoryById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RepositoryDetailResponse'
          description: OK
      summary: リポジトリ詳細取得
      tags:
      - Repository Management
    put:
      description: 既存のリポジトリを更新します
      operationId: updateRepository
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRepositoryRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RepositoryResponse'
          description: OK
      summary: リポジトリ更新
      tags:
      - Repository Management
  /api/v1/repositories/{id}/clone:
    post:
      description: リポジトリをクローンします
      operationId: cloneRepository
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneRepositoryRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RepositoryOperationResponse'
          description: OK
      summary: リポジトリクローン
      tags:
      - Repository Management
  /api/v1/repositories/{id}/toggle-status:
    post:
      description: リポジトリのアクティブ/非アクティブ状態を切り替えます
      operationId: toggleRepositoryStatus
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RepositoryResponse'
          description: OK
      summary: リポジトリ状態切り替え
      tags:
      - Repository Management
  /api/v1/queues:
    get:
      description: Retrieves all queues in the system
      operationId: getAllQueues
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/QueueResponse'
                type: array
          description: OK
      summary: Get all queues
      tags:
      - Queue
    post:
      description: Creates a new queue in the system
      operationId: createQueue
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateQueueRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QueueResponse'
          description: OK
      summary: Create a new queue
      tags:
      - Session
  /api/v1/sessions/search:
    get:
      description: Searches queues by name pattern
      operationId: searchQueuesByName
      parameters:
      - in: query
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/QueueResponse'
                type: array
          description: OK
      summary: Search queues by name
      tags:
      - Queue
  /api/v1/queues/status/{status}:
    get:
      description: Retrieves all queues with a specific status
      operationId: getQueuesByStatus
      parameters:
      - in: path
        name: status
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/QueueResponse'
                type: array
          description: OK
      summary: Get queues by status
      tags:
      - Queue
  /api/v1/queues/tag/{tag}:
    get:
      description: Retrieves all queues with a specific tag
      operationId: getQueuesByTag
      parameters:
      - in: path
        name: tag
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/QueueResponse'
                type: array
          description: OK
      summary: Get queues by tag
      tags:
      - Queue
  /api/v1/queues/{id}:
    delete:
      description: Deletes a specific queue
      operationId: deleteQueue
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
      summary: Delete queue
      tags:
      - Queue
    get:
      description: Retrieves a specific queue by its ID
      operationId: getQueueById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QueueResponse'
          description: OK
      summary: Get queue by ID
      tags:
      - Queue
    put:
      description: Updates an existing queue (status changes are not allowed)
      operationId: updateQueue
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQueueRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QueueResponse'
          description: OK
      summary: Update queue
      tags:
      - Queue
  /api/v1/queues/{id}/detail:
    get:
      description: Retrieves detailed information about a queue including workspaces
      operationId: getQueueDetail
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QueueDetailResponse'
          description: OK
      summary: Get queue detail
      tags:
      - Session Detail
  /api/v1/sessions/{id}/status:
    put:
      description: Internal API - Status updates are managed by the system
      operationId: updateQueueStatus
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                additionalProperties:
                  type: string
                type: object
          description: OK
      summary: Update queue status
      tags:
      - Queue
  /api/v1/queues/{id}/sync-status:
    post:
      description: Synchronizes queue status
      operationId: syncQueueStatus
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QueueResponse'
          description: OK
      summary: Sync queue status
      tags:
      - Queue
  /api/v1/queues/{id}/tags:
    post:
      description: Adds a tag to a specific queue
      operationId: addTagToQueue
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QueueResponse'
          description: OK
      summary: Add tag to queue
      tags:
      - Queue
  /api/v1/queues/{id}/tags/{tag}:
    delete:
      description: Removes a tag from a specific queue
      operationId: removeTagFromQueue
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - in: path
        name: tag
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/QueueResponse'
          description: OK
      summary: Remove tag from queue
      tags:
      - Session
  /api/v1/tasks:
    get:
      description: Retrieves all tasks in the system
      operationId: getAllTasks
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/TaskResponse'
                type: array
          description: OK
      summary: Get all tasks
      tags:
      - Task
    post:
      description: Creates a new task in the system
      operationId: createTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Create a new task
      tags:
      - Task
  /api/v1/tasks/search:
    get:
      description: Searches tasks by name pattern
      operationId: searchTasksByName
      parameters:
      - in: query
        name: name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/TaskResponse'
                type: array
          description: OK
      summary: Search tasks by name
      tags:
      - Task
  /api/v1/tasks/queue/{queueId}:
    get:
      description: Retrieves all tasks for a specific queue
      operationId: getTasksByQueueId
      parameters:
      - in: path
        name: queueId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/TaskResponse'
                type: array
          description: OK
      summary: Get tasks by queue ID
      tags:
      - Task
  /api/v1/tasks/queue/{queueId}/pending:
    get:
      description: Retrieves pending tasks for a specific queue
      operationId: getPendingTasksForQueue
      parameters:
      - in: path
        name: queueId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/TaskResponse'
                type: array
          description: OK
      summary: Get pending tasks for queue
      tags:
      - Task
  /api/v1/tasks/status/{status}:
    get:
      description: Retrieves all tasks with a specific status
      operationId: getTasksByStatus
      parameters:
      - in: path
        name: status
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/TaskResponse'
                type: array
          description: OK
      summary: Get tasks by status
      tags:
      - Task
  /api/v1/tasks/tag/{tag}:
    get:
      description: Retrieves all tasks with a specific tag
      operationId: getTasksByTag
      parameters:
      - in: path
        name: tag
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                items:
                  $ref: '#/components/schemas/TaskResponse'
                type: array
          description: OK
      summary: Get tasks by tag
      tags:
      - Task
  /api/v1/tasks/{id}:
    delete:
      description: Deletes a specific task
      operationId: deleteTask
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
      summary: Delete task
      tags:
      - Task
    get:
      description: Retrieves a specific task by its ID
      operationId: getTaskById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Get task by ID
      tags:
      - Task
    put:
      description: Updates an existing task
      operationId: updateTask
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Update task
      tags:
      - Task
  /api/v1/tasks/{id}/cancel:
    post:
      description: Cancels a specific task
      operationId: cancelTask
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Cancel task
      tags:
      - Task
  /api/v1/tasks/{id}/complete:
    post:
      description: Marks a specific task as completed
      operationId: completeTask
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Complete task
      tags:
      - Task
  /api/v1/tasks/{id}/fail:
    post:
      description: Marks a specific task as failed
      operationId: failTask
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Fail task
      tags:
      - Task
  /api/v1/tasks/{id}/logs:
    post:
      description: Adds a log message to a specific task
      operationId: addLogToTask
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Add log to task
      tags:
      - Task
  /api/v1/tasks/{id}/retry:
    post:
      description: Retries a specific task
      operationId: retryTask
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Retry task
      tags:
      - Task
  /api/v1/tasks/{id}/start:
    post:
      description: Starts a specific task
      operationId: startTask
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Start task
      tags:
      - Task
  /api/v1/tasks/{id}/status:
    put:
      description: "Updates the status of a specific task. **DEPRECATED**: Use WebSocket /ws/tasks/status for real-time status updates instead."
      deprecated: true
      operationId: updateTaskStatus
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskResponse'
          description: OK
      summary: Update task status
      tags:
      - Task
  /ws/tasks:
    get:
      summary: WebSocket connection for real-time task distribution
      description: |
        WebSocketエンドポイント for keruta-executor to receive tasks in real-time.
        
        **Connection URL**: `ws://host:port/ws/tasks`
        
        **Message Format**:
        - Incoming: Task assignment messages
        - Outgoing: Task status updates
        
        **Authentication**: Bearer token required in Authorization header
      operationId: connectTaskWebSocket
      tags:
        - websocket-controller
      responses:
        '101':
          description: WebSocket connection established
        '401':
          description: Unauthorized - invalid token
        '403':
          description: Forbidden - insufficient permissions
  /ws/agents/{agentId}/logs:
    get:
      summary: WebSocket connection for real-time log streaming
      description: |
        WebSocketエンドポイント for keruta-agent to stream logs in real-time.

        **Connection URL**: `ws://host:port/ws/agents/{agentId}/logs`

        **Message Format**:
        - Outgoing: Real-time log entries
        - Incoming: Log level configuration

        **Authentication**: Bearer token required in Authorization header
      operationId: connectAgentLogWebSocket
      parameters:
        - in: path
          name: agentId
          required: true
          schema:
            type: string
          description: Unique identifier for the agent
      tags:
        - websocket-controller
      responses:
        '101':
          description: WebSocket connection established
        '401':
          description: Unauthorized - invalid token
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: Agent not found
  /ws/tasks/status:
    get:
      summary: WebSocket connection for real-time task status updates
      description: |
        WebSocketエンドポイント for real-time task status updates.

        **Connection URL**: `ws://host:port/ws/tasks/status`

        **Message Format**:
        - Incoming: Subscription requests for task updates
        - Outgoing: Real-time task status, progress, and log updates

        **Subscription Channels**:
        - `task:{taskId}` - 特定のタスクの更新
        - `queue:{queueId}` - 特定のキューのタスク更新
        - `provider:{providerId}` - 特定のプロバイダーのタスク更新
        - `all` - 全てのタスク更新

        **Message Types**:
        - `task_status_update` - タスクステータス変更
        - `task_progress_update` - タスク進捗更新
        - `task_log_update` - タスクログ更新

        **Authentication**: Bearer token required in Authorization header

        **Example Subscription**:
        ```json
        {
          "action": "subscribe",
          "channels": ["task:task-123", "queue:queue-456"],
          "filters": {
            "statuses": ["running", "completed", "failed"]
          }
        }
        ```

        **Example Update Message**:
        ```json
        {
          "type": "task_status_update",
          "taskId": "task-123",
          "timestamp": "2024-01-01T12:00:00Z",
          "data": {
            "status": "running",
            "progress": 45,
            "message": "Processing data...",
            "startedAt": "2024-01-01T11:30:00Z"
          }
        }
        ```
      operationId: connectTaskStatusWebSocket
      tags:
        - websocket-controller
      responses:
        '101':
          description: WebSocket connection established
        '401':
          description: Unauthorized - invalid token
        '403':
          description: Forbidden - insufficient permissions
  # Task Execution Provider Endpoints
  /api/v1/providers:
    get:
      summary: プロバイダー一覧取得
      description: 全てのタスク実行プロバイダーの一覧を取得します
      operationId: getAllProviders
      parameters:
        - in: query
          name: type
          required: false
          schema:
            type: string
            enum: [kubernetes, docker, local, ssh, cloud]
          description: プロバイダーの種類でフィルタリング
        - in: query
          name: isActive
          required: false
          schema:
            type: boolean
          description: アクティブなプロバイダーのみ取得
        - in: query
          name: capability
          required: false
          schema:
            type: string
          description: 特定の機能を持つプロバイダーのみ取得
        - in: query
          name: tag
          required: false
          schema:
            type: string
          description: 特定のタグを持つプロバイダーのみ取得
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskExecutionProvider'
          description: OK
      tags:
        - Task Execution Provider
    post:
      summary: プロバイダー作成
      description: 新しいタスク実行プロバイダーを作成します
      operationId: createProvider
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskExecutionProviderRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskExecutionProvider'
          description: OK
      tags:
        - Task Execution Provider
  /api/v1/providers/{id}:
    get:
      summary: プロバイダー詳細取得
      description: 指定されたIDのプロバイダー詳細を取得します
      operationId: getProviderById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: プロバイダーID
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskExecutionProvider'
          description: OK
      tags:
        - Task Execution Provider
    put:
      summary: プロバイダー更新
      description: 既存のタスク実行プロバイダーを更新します
      operationId: updateProvider
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: プロバイダーID
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskExecutionProviderRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskExecutionProvider'
          description: OK
      tags:
        - Task Execution Provider
    delete:
      summary: プロバイダー削除
      description: 指定されたIDのプロバイダーを削除します
      operationId: deleteProvider
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: プロバイダーID
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: object
                additionalProperties:
                  type: string
          description: OK
      tags:
        - Task Execution Provider
  /api/v1/providers/{id}/health:
    get:
      summary: プロバイダーヘルスチェック
      description: プロバイダーのヘルス状態を確認します
      operationId: checkProviderHealth
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: プロバイダーID
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, unhealthy, unknown]
                  message:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
          description: OK
      tags:
        - Task Execution Provider
    post:
      summary: プロバイダーヘルスチェック実行
      description: プロバイダーのヘルスチェックを手動で実行します
      operationId: performProviderHealthCheck
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: プロバイダーID
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskExecutionProvider'
          description: OK
      tags:
        - Task Execution Provider
  /api/v1/providers/{id}/toggle-status:
    post:
      summary: プロバイダー状態切り替え
      description: プロバイダーのアクティブ/非アクティブ状態を切り替えます
      operationId: toggleProviderStatus
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: プロバイダーID
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskExecutionProvider'
          description: OK
      tags:
        - Task Execution Provider
  /api/v1/providers/select:
    post:
      summary: 最適プロバイダー選択
      description: タスクの要件に基づいて最適なプロバイダーを選択します
      operationId: selectOptimalProvider
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                requiredCapabilities:
                  type: array
                  items:
                    type: string
                  description: 必要な機能のリスト
                requiredArchitecture:
                  type: string
                  description: 必要なアーキテクチャ
                resourceRequirements:
                  $ref: '#/components/schemas/ResourceRequirements'
                tags:
                  type: array
                  items:
                    type: string
                  description: 必要なタグのリスト
              required:
                - requiredCapabilities
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskExecutionProvider'
          description: OK
        '404':
          content:
            '*/*':
              schema:
                type: object
                properties:
                  message:
                    type: string
          description: 条件に合うプロバイダーが見つかりません
      tags:
        - Task Execution Provider
  /api/v1/providers/{id}/queues:
    get:
      summary: プロバイダーに関連付けられたキュー一覧
      description: 指定したプロバイダーに関連付けられたキューの一覧を取得します
      operationId: getQueuesByProvider
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: プロバイダーID
        - in: query
          name: status
          required: false
          schema:
            type: string
          description: キューのステータスでフィルタリング
      responses:
        '200':
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QueueResponse'
          description: OK
      tags:
        - Task Execution Provider
  /api/v1/execution:
    post:
      summary: タスク実行開始
      description: 指定したプロバイダーでタスクの実行を開始します
      operationId: executeTask
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskExecutionRequest'
        required: true
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskExecutionResult'
          description: OK
      tags:
        - Task Execution Provider
  /api/v1/execution/{executionId}:
    get:
      summary: 実行結果取得
      description: 指定された実行IDの結果を取得します
      operationId: getExecutionResult
      parameters:
        - in: path
          name: executionId
          required: true
          schema:
            type: string
          description: 実行ID
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskExecutionResult'
          description: OK
      tags:
        - Task Execution Provider
    delete:
      summary: タスク実行キャンセル
      description: 実行中のタスクをキャンセルします
      operationId: cancelExecution
      parameters:
        - in: path
          name: executionId
          required: true
          schema:
            type: string
          description: 実行ID
      responses:
        '200':
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TaskExecutionResult'
          description: OK
      tags:
        - Task Execution Provider
  /api/v1/execution/{executionId}/logs:
    get:
      summary: 実行ログ取得
      description: 指定された実行IDのログを取得します
      operationId: getExecutionLogs
      parameters:
        - in: path
          name: executionId
          required: true
          schema:
            type: string
          description: 実行ID
        - in: query
          name: follow
          required: false
          schema:
            type: boolean
            default: false
          description: リアルタイムでログを取得するかどうか
        - in: query
          name: tail
          required: false
          schema:
            type: integer
            format: int32
          description: 最後のN行のログを取得
      responses:
        '200':
          content:
            text/plain:
              schema:
                type: string
          description: OK
      tags:
        - Task Execution Provider
servers:
- description: Generated server url
  url: http://localhost:8080
tags:
- description: Queue management API
  name: Queue
- description: Task integration API
  name: Task Integration
- description: Queue detail management API
  name: Queue Detail
- description: Document management API
  name: Document
- description: リポジトリ管理API
  name: Repository Management
- description: Authentication API (Disabled)
  name: Authentication
- description: Task management API
  name: Task
- description: タスク実行プロバイダー管理API
  name: Task Execution Provider
